#define BUILTIN_PLUGIN

@PLUGIN_INCLUDE_LIST@

#undef BUILTIN_PLUGIN

#include "pluginloader.h"

#include "shellplugin.h"

#include <boost/filesystem.hpp>



PluginLoader::PluginLoader(const std::vector<std::string>&& binaryPluginPaths, const std::vector<std::string>&& shellPluginPaths)
    : binaryPluginPaths_(binaryPluginPaths)
    , shellPluginPaths_(shellPluginPaths)
{
    binaryPluginPaths_.push_back("@DEFAULT_BINARY_PLUGIN_PATH@");
    shellPluginPaths_.push_back("@DEFAULT_SHELL_PLUGIN_PATH@");
}
PluginLoader::~PluginLoader() {
}
Plugin* PluginLoader::loadPlugin(const std::string& name, const PluginBaseConstructionData& baseConstructionData, const YAML::Node& parameters) const {
    Plugin* output;
    output = loadExternalPlugin(name, baseConstructionData, parameters);
    if(output) {
        return output;
    }
    output = loadShellPlugin(name, baseConstructionData, parameters);
    if(output) {
        return output;
    }
    return loadBuiltinPlugin(name, baseConstructionData, parameters);
}
#define TRY_LOAD_PLUGIN(plugin_name)\
    if(name == #plugin_name ) { \
        return createPlugin_ ## plugin_name (baseConstructionData, parameters);\
    }
Plugin* PluginLoader::loadBuiltinPlugin(const std::string& name, const PluginBaseConstructionData& baseConstructionData, const YAML::Node& parameters) const {
    @PLUGIN_LOAD_LIST@
    return nullptr;
}
Plugin* PluginLoader::loadExternalPlugin(const std::string& name, const PluginBaseConstructionData& baseConstructionData, const YAML::Node& parameters) const {
    return nullptr;
}
Plugin* PluginLoader::loadShellPlugin(const std::string& name, const PluginBaseConstructionData& baseConstructionData, const YAML::Node& parameters) const {
    boost::filesystem::path namePath(name);
    for(const auto& pluginDir : shellPluginPaths_) {
        boost::filesystem::path pluginPath = boost::filesystem::path(pluginDir) / namePath;
        if(boost::filesystem::exists(pluginPath) && boost::filesystem::is_regular_file(pluginPath)) {
            return new ShellPlugin(baseConstructionData, pluginPath.native(), parameters);
        }
    }
    return nullptr;
}
